}
#Vemos cómo funciona:
riseToPower(9)
riseToPower(9,3)
riseToPower(9,0)
riseToPower=function(base,exponent=2){
#####
result=1
if (exponent > 0){
for (time in 1:exponent){
result=result*base
}
}
#####
return(result)
}
riseToPower=function(base,exponent=2){
#####
result=1
if (exponent > 0){
for (time in 1:exponent){
result=result*base
}
}
#####
return(result)
}
#Vemos cómo funciona:
riseToPower(9)
riseToPower(9,3)
riseToPower(9,0)
# quizas esto es mas claro:
riseToPower(base=9,exponent=0)
# con argumentos explicitos no se require orden
riseToPower(exponent=0,base=9)
riseToPower=function(base,exponent=2){
#####
result=1
if (exponent > 0){
for (time in 1:exponent){
result=result*base
}
}
#####
return(result)
}
#Vemos cómo funciona:
riseToPower(9)
riseToPower(9,3)
riseToPower(9,0)
divRounded=function(numerator,denominator,precision=2){
if (denominator==0){
return('0 en el denominador')
}else{
result = numerator/denominator
return (round(result, precision))}
}
divRounded=function(numerator,denominator,precision=2){
if (denominator==0){
return('0 en el denominador')
}else{
result = numerator/denominator
return (round(result, precision))}
}
Probando:
n=13
divRounded=function(numerator,denominator,precision=2){
if (denominator==0){
return('0 en el denominador')
}else{
result = numerator/denominator
return (round(result, precision))}
}
#Probando:
n=13
d=12
p=3
divRounded(n,d,p)
inputArgs=list(precision=3,numerator=13,denominator=12)
do.call(divRounded,inputArgs)
divRounded=function(numerator,denominator,precision=2){
if (denominator==0){
return('0 en el denominador')
}else{
result = numerator/denominator
return (round(result, precision))}
}
divRounded=function(numerator,denominator,precision=2){
if (denominator==0){
return('0 en el denominador')
}else{
result = numerator/denominator
return (round(result, precision))}
}
#Probando:
n=13
d=12
p=3
divRounded(n,d,p)
divRounded=function(numerator,denominator,precision=20){
if (denominator==0){
return('0 en el denominador')
}else{
result = numerator/denominator
return (round(result, precision))}
}
#Probando:
n=13
d=12
p=3
divRounded(n,d,p)
divRounded=function(numerator,denominator,precision=20){
if (denominator==0){
return('0 en el denominador')
}else{
result = numerator/denominator
return (round(result, precision))}
}
#Probando:
n=13
d=12
p=30
divRounded(n,d,p)
divRounded=function(numerator,denominator,precision=0){
if (denominator==0){
return('0 en el denominador')
}else{
result = numerator/denominator
return (round(result, precision))}
}
#Probando:
n=13
d=12
p=3
divRounded(n,d,p)
inputArgs=list(precision=2,numerator=13,denominator=12)
do.call(divRounded,inputArgs)
inputArgs=list(precision=20,numerator=13,denominator=12)
do.call(divRounded,inputArgs)
factors=function(number){
vectorOfAnswers=c() # para guardar respuestas
for (i in 1:number){
#si el residuo de 'number'/'i' es igual a cero...
if ((number %% i) == 0){
# ...añade 'i' a la respuesta!
vectorOfAnswers=c(vectorOfAnswers,i)
}
}
return (vectorOfAnswers)
}
factors=function(number){
vectorOfAnswers=c() # para guardar respuestas
for (i in 1:number){
#si el residuo de 'number'/'i' es igual a cero...
if ((number %% i) == 0){
# ...añade 'i' a la respuesta!
vectorOfAnswers=c(vectorOfAnswers,i)
}
}
return (vectorOfAnswers)
}
#Probando:
factors(20)
double=function(x){
return (2*x)}
double=function(x){
return (2*x)}
#Creemos un vector:
myVector=c(1,2,3)
#¿Qué sale de aquí?
double(myVector)
myList=list(1,2,3)
double(myList)
myList=list(1,2,3)
#double(myList)
Map(double,myVector) # devuelte lista
Map(double,myList) # devuelte lista
mapply(double,myVector)
mapply(double,myList)
numberA=c(10,20,30,40,50)
numberB=c(6,7,8,9,10)
dataDF=data.frame(numberA,numberB)
dataDF
dataDF2=dataDF
# aqui está la copia
dataDF2
for (column in 1:ncol(dataDF2)){
for (row in 1:nrow(dataDF2[column])){
dataDF2[row,column]=double(dataDF2[row,column])
}
}
# updated:
dataDF2
dataDF
double(dataDF)
lapply(dataDF,double)
as.data.frame(lapply(dataDF,double))
# se aplica por sólo por columnas:
as.data.frame(lapply(dataDF,sum))
# por fila
apply(dataDF,1,sum)
# por columna
apply(dataDF,2,sum)
Map(double,myList) # devuelte lista
nrow(artistas_total)
artistas_total=merge(artistas,bandas)
nombre=c( "George Harrison", "Mick Jagger", "Tom Jones", "Davy Jones",
"John Lennon", "Paul McCartney", "Jimmy Page", "Joe Perry", "Elvis Presley")
instrumento=c("Guitarra", "Voz", "Voz", "Voz", "Guitarra", "Bajo",
"Guitarra", "Guitarra", "Voz")
edad = c( 58, 74, 78, 66, 40, 75, 74, 67, 62)
vivo = c(F,T,T,F,F,T,T,T,F)
artistas=data.frame(nombre,instrumento,edad,vivo)
artistas
#artistasCopy=artistas
#artistasCopy[9,3]=42
#artistasCopy
artistas[9,3]=42
artistas
artistas[6,]
artistas[artistas$edad>60 & artistas$vivo=='TRUE',]
artistas_ordenada=artistas[order(artistas$edad),]
artistas_ordenada
nombre=c("George Harrison", "Mick Jagger", "John Lennon", "Paul McCartney",
"Jimmy Page", "Joe Perry")
banda = c("The Beatles", "The Rolling Stones", "The Beatles", "The Beatles",
"Led Zeppelin", "Aerosmith")
grammy=c(28, 4, 28, 28, 5, 4)
bandas=data.frame(nombre,banda,grammy)
bandas
artistas_total=merge(artistas,bandas)
artistas_total
nrow(artistas_total)
bandas[which.max(DF_lists$age),]
bandas[which.max(bandas$edad),]
bandasmayor=bandas[which.max(bandas$edad),]
bandasmayor
bandasmayor=artistas_total[which.max(artistas_total$edad),]
bandasmayor
artistas_total[which.max(artistas_total$edad),]
artistas_ordenada=artistas[-order(artistas$edad),]
artistas_ordenada
artistas_ordenada=artistas[order(-artistas$edad),]
artistas_ordenada
artistas_ordenada=artistas[order(artistas$edad),]
artistas_ordenada
artistas_total[order(-artistas$grammy),]
artistas_total[order(-artistas_totals$grammy),]
artistas_total[order(-artistas_total$grammy),]
artistas_total[artistas_total$edad<5,]
artistas_total[artistas_total$grammy<5,]
artistas_tota[3,]
artistas_total[which.max(artistas_total$edad)& artistas_total$banda=='The Beatles',]
artistas_total[which.max(-artistas_total$edad)& artistas_total$banda=='The Beatles',]
artistas_total[which.max(artistas_total$edad)& artistas_total$banda=='The Beatles',]
artistas_total[which.max(order(artistas_total$edad)& artistas_total$banda=='The Beatles',]
artistas_total[(order(artistas_total$edad)& artistas_total$banda=='The Beatles',]
artistas_total[which.max(artistas_total$edad),]
#
artistas_total[which.max(artistas_total$edad)& artistas_total$banda=='The Beatles',]
#
artistas_total[which.min(artistas_total$edad)& artistas_total$banda=='The Beatles',]
#
artistas_total[which.max(artistas_total$instrumento)& artistas_total$banda=='The Beatles',]
artistas_total[artistas_total$grammy<5,]
artistas_total[,c(1,4)]
artistas_total[artistas_total$grammy<5,]
artistas_total[,c(1,6)]
art=artistas_total[artistas_total$grammy<5,]
art[,c(1,6)]
inst=artistas_total[which.max(artistas_total$edad)& artistas_total$banda=='The Beatles',]
inst[,c(2,3,5)]
inst=artistas_total[which.max(artistas_total$edad),]
inst[,c(2,3,5)]
inst=artistas_total[which.max(artistas_total$edad)& artistas_total$banda=='The Beatles',]
inst[,c(2,3,5)]
inst=artistas_total[which.max(artistas_total$edad)& artistas_total$banda=='The Beatles',]
inst[,c(2,3,5)]
inst=artistas_total[which.max(artistas_total$edad)& artistas_total$banda='The Beatles',]
inst=artistas_total[which.max( artistas_total$banda=='The Beatles',]
inst=artistas_total[which.max( artistas_total$banda=='The Beatles'&artistas_total$edad),]
inst[,c(2,3,5)]
inst=artistas_total[which.max(artistas_total$banda=='The Beatles'&artistas_total$edad),]
inst[,c(2,3,5)]
inst=artistas_total[which.max(artistas_total$banda=='The Beatles'&artistas_total$-edad),]
inst=artistas_total[which.max(artistas_total$banda=='The Beatles'&-artistas_total$edad),]
inst[,c(2,3,5)]
inst=artistas_total[which.max(-artistas_total$banda=='The Beatles'&artistas_total$edad),]
inst[,c(2,3,5)]
inst=artistas_total[ artistas_total$banda=='The Beatles'&which.max(artistas_total$edad),]
inst[,c(2,3,5)]
#inst=artistas_total[which.max(artistas_total$edad)& artistas_total$banda=='The Beatles',]
inst=DF_lists[order(artistas_total$edad,artistas_total$banda=='The Beatles'),]
inst[,c(2,3,5)]
#inst=artistas_total[which.max(artistas_total$edad)& artistas_total$banda=='The Beatles',]
inst=DF_lists[order(artistas_total$edad,artistas_total$banda=='The Beatles'),]
inst
inst=artistas_total[which.max(artistas_total$edad)& artistas_total$banda=='The Beatles',]
inst[,c(2,3,5)]
inst=artistas_total[which.max(artistas_total$edad & artistas_total$banda=='The Beatles'),]
inst[,c(2,3,5)]
inst=artistas_total[which.max(artistas_total$edad& artistas_total$banda=='The Beatles'),]
inst[,c(2,3,5)]
inst=artistas_total[which.max(artistas_total$edad),]
inst[,c(2,3,5)]
inst=artistas_total[which.max(artistas_total$edad),]
inst[inst$edad>30 & artistas_total$banda=='The Beatles',]
# & artistas_total$banda=='The Beatles'
inst[,c(2,3,5)]
inst=artistas_total[which.max(artistas_total$edad),]
inst[inst$edad>0 & artistas_total$banda=='The Beatles',]
# & artistas_total$banda=='The Beatles'
inst[,c(2,3,5)]
inst=artistas_total[which.max(artistas_total$edad),]
inst[inst$edad>0 & inst$banda=='The Beatles',]
inst[,c(2,3,5)]
#artistasCopy=artistas
#artistasCopy[9,3]=42
#artistasCopy
artistas[9,3]=42
artistas[,c(9,3)]
#artistasCopy=artistas
#artistasCopy[9,3]=42
#artistasCopy
artistas[9,3]=42
artistas[,(9,3)]
#artistasCopy=artistas
#artistasCopy[9,3]=42
#artistasCopy
artistas[9,3]=42
artistas[c(2,3),]
#artistasCopy=artistas
#artistasCopy[9,3]=42
#artistasCopy
artistas[9,3]=42
artistas[c(9),]
inst=artistas_total[which.max(artistas_total$edad),]
inst[inst$edad>0 & inst$banda=='The Beatles',]
instu=inst[,c(2,3,5)]
#artistasCopy=artistas
#artistasCopy[9,3]=42
#artistasCopy[c(9),]
artistas[9,3]=42
artistas[c(9),(1,3)]
#artistasCopy=artistas
#artistasCopy[9,3]=42
#artistasCopy[c(9),]
artistas[9,3]=42
artistas[c(9),c(1,3)]
artistas=data.frame(nombre,instrumento,edad,vivo)
nombre=c( "George Harrison", "Mick Jagger", "Tom Jones", "Davy Jones",
"John Lennon", "Paul McCartney", "Jimmy Page", "Joe Perry", "Elvis Presley")
instrumento=c("Guitarra", "Voz", "Voz", "Voz", "Guitarra", "Bajo",
"Guitarra", "Guitarra", "Voz")
edad = c( 58, 74, 78, 66, 40, 75, 74, 67, 62)
vivo = c(F,T,T,F,F,T,T,T,F)
artistas=data.frame(nombre,instrumento,edad,vivo)
artistas
#artistasCopy=artistas
#artistasCopy[9,3]=42
#artistasCopy[c(9),]
artistas[9,3]=42
artistas[c(9),c(1,3)]
nombre=c( "George Harrison", "Mick Jagger", "Tom Jones", "Davy Jones",
"John Lennon", "Paul McCartney", "Jimmy Page", "Joe Perry", "Elvis Presley")
instrumento=c("Guitarra", "Voz", "Voz", "Voz", "Guitarra", "Bajo",
"Guitarra", "Guitarra", "Voz")
edad = c( 58, 74, 78, 66, 40, 75, 74, 67, 62)
vivo = c(F,T,T,F,F,T,T,T,F)
artistas=data.frame(nombre,instrumento,edad,vivo)
artistas
#artistasCopy=artistas
#artistasCopy[9,3]=42
#artistasCopy[c(9),]
artistas[9,3]=42
artistas[c(9),c(1,3)]
artistas=data.frame(nombre,instrumento,edad,vivo)
artistas
artistasCopy=artistas
artistasCopy[9,3]=42
artistasCopy[c(9),c(1,3)]
#artistas[9,3]=42
#artistas[c(9),c(1,3)]
artistas_ordenada=artistas[order(artistas$edad),]
artistas_ordenada
inst=artistas_total[which.max(artistas_total$edad),]
inst[inst$edad>0 & inst$banda=='The Beatles',]
instu=inst[,c(2,3,5)]
inst=artistas_total[which.max(artistas_total$edad),]
inst[inst$edad>0 & inst$banda=='The Beatles',]
instu=inst[,c(1,3,5)]
inst=artistas_total[which.max(artistas_total$edad),]
inst[inst$edad>0 & inst$banda=='The Beatles',]
instu=inst[c(2,3,5),]
inst=artistas_total[which.max(artistas_total$edad),]
inst[inst$edad>0 & inst$banda=='The Beatles',]
instu=inst
inst=artistas_total[which.max(artistas_total$edad),]
inst[inst$edad>0 & inst$banda=='The Beatles',]
instu=inst[c(2,3,5),]
inst=artistas_total[which.max(artistas_total$edad),]
inst[inst$edad>0 & inst$banda=='The Beatles',]
instu=inst[,c(1,3)]
inst=artistas_total[which.max(artistas_total$edad),]
inst[inst$edad>0 & inst$banda=='The Beatles',]
instu=inst
instu[,c(1,3)]
inst=artistas_total[which.max(artistas_total$edad),]
inst[inst$edad>0 & inst$banda=='The Beatles',]
instu=inst[,c(2,3,5)]
inst=artistas_total[which.max(artistas_total$edad),]
instu=inst[inst$edad>0 & inst$banda=='The Beatles',]
instu[,c(2,3,5)]
head(artistas)
head(artistas(3))
head(3)
artistas[which(artistas$nombre=='Elvis Presley')]$edad=42
head(artistas,3)
artistas[which(artistas$nombre=='Elvis Presley'),]$edad=42
artistas[which(artistas$nombre=='Elvis Presley'),]$edad=42
artistas
artistas[(artistas$instrumento=='Bajo'),]
unique(artistas[artistas$edad>60 & artistas$vivo,]$instrumento)
setwd("C:/Users/ASUS X441U/Downloads/ProyectoTutorial/ProyectoTutorial")
# carga de datos
filename="indexes.csv"
dataidx=read.csv(filename, stringsAsFactors = FALSE)
# previsión:
level5=c("muy malo","malo","medio","bueno","muy bueno")
level4=c("muy malo","malo","bueno","muy bueno")
level3=c("muy malo","medio","muy bueno")
title='DistribuciÃ³n de la Democracia'
paleta='red'
barplot(demoTableRel,main=title,
col=paleta,ylim = c(0,100),
ylab = "%")
# carga de datos
filename="indexes.csv"
dataidx=read.csv(filename, stringsAsFactors = FALSE)
# previsión:
level5=c("muy malo","malo","medio","bueno","muy bueno")
level4=c("muy malo","malo","bueno","muy bueno")
level3=c("muy malo","medio","muy bueno")
demoTable=table(dataidx[,5])
names(demoTable)=level4
demoTable
demoTableRel=round(prop.table(demoTable)*100,1)
demoTableRel
title='Distribución de la Democracia'
paleta='red'
barplot(demoTableRel,main=title,
col=paleta,ylim = c(0,100),
ylab = "%")
ecoTable=table(dataidx[,3])
names(ecoTable)=level5
ecoTable
ecoTableRel=round(prop.table(ecoTable)*100,1)
ecoTableRel
title='DistribuciÃ³n de la Libertad EconÃ³mica'
paleta='red'
barplot(ecoTableRel,main=title,
col=paleta,ylim = c(0,100),
ylab = "%")
worldTable=table(dataidx[,2])
names(worldTable)=level3
worldTable
explanans=names(dataidx)[c(2:4)]
corrDem=cor(dataidx[,5],dataidx[,explanans],
use = "na.or.complete")
corrDem
corrTable=round(cor(dataidx[explanans],
use = "na.or.complete"),2)
# Hide upper triangle
corrTable[upper.tri(corrTable)]<-""
as.data.frame(corrTable)
LinRegA = lm(Democracy ~ ., data = dataidx[,c(3:5)])
summary(LinRegA)
library(reporttools)
library(xtable)
titulo <- "Tablas de Frecuencia de la variables en estudio"
tableNominal(vars = dataidx[, c(2:5)],
cap = titulo, vertical = FALSE,
caption.placement = "top",
add.to.row = list(pos = list(0),
command = "\\hline"))
install.packages("reporttools")
install.packages("xtable")
library(reporttools)
library(xtable)
titulo <- "Tablas de Frecuencia de la variables en estudio"
tableNominal(vars = dataidx[, c(2:5)],
cap = titulo, vertical = FALSE,
caption.placement = "top",
add.to.row = list(pos = list(0),
command = "\\hline"))
install.packages("stargazer")
install.packages("adjustbox")
install.packages("corrplot")
install.packages("rgdal")
install.packages("RColorBrewer")
install.packages("classInt")
source('C:/Users/ASUS X441U/Downloads/ProyectoFinal/ProyectoFinal/basico.R', echo=TRUE)
# que variables y tipo
str(colb)
source('C:/Users/ASUS X441U/Downloads/ProyectoFinal/ProyectoFinal/basico.R', echo=TRUE)
setwd("~/Repositorios/tutorialsimple")
setwd("~/Repositorio2/repositor2")
setwd("C:/Users/ASUS X441U/Downloads/ProyectoFinal/ProyectoFinal")
setwd("C:/Users/ASUS X441U/Downloads/ProyectoFinal/ProyectoFinal")
setwd("C:/Users/ASUS X441U/Downloads/ProyectoFinal/ProyectoFinal")
setwd("C:/Users/ASUS X441U/Downloads/ProyectoFinal/ProyectoFinal")
setwd("C:/Users/ASUS X441U/Downloads/ProyectoFinal/ProyectoFinal")
